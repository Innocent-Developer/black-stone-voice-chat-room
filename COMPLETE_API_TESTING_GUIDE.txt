===============================================================================
                        COMPLETE API TESTING GUIDE
===============================================================================

üîó BASE URL: http://www.blackstonevoicechatroom.online
üß™ Complete testing guide for all Chat and Gift APIs
üìù Includes test data, hints, and troubleshooting tips

===============================================================================
                           TESTING PREPARATION
===============================================================================

üîß TOOLS YOU CAN USE:
- Postman (Recommended)
- Thunder Client (VS Code Extension)
- cURL commands
- Browser Developer Tools
- Frontend JavaScript fetch()

üìã TEST DATA PREPARATION:
- Admin User ID: 507f1f77bcf86cd799439001
- Test User 1 ID: 507f1f77bcf86cd799439010
- Test User 2 ID: 507f1f77bcf86cd799439011
- Test User 3 ID: 507f1f77bcf86cd799439012
- Sample Gift ID: 507f1f77bcf86cd799439050

üéØ TESTING SEQUENCE:
1. Test Chat APIs first
2. Test Admin Message APIs
3. Test Gift APIs
4. Test Error scenarios

===============================================================================
                           CHAT APIS TESTING
===============================================================================

TEST 1: SEND MESSAGE BETWEEN USERS
Method: POST
URL: http://www.blackstonevoicechatroom.online/chats/send

Headers:
Content-Type: application/json

Test Body:
{
  "senderId": "507f1f77bcf86cd799439010",
  "receiverId": "507f1f77bcf86cd799439011",
  "content": "Hello! This is a test message from User 1 to User 2.",
  "title": "Test Message",
  "image": "https://example.com/test-image.jpg"
}

Expected Response (201):
{
  "success": true,
  "message": "Message sent successfully",
  "data": {
    "_id": "generated_message_id",
    "senderId": "507f1f77bcf86cd799439010",
    "receiverId": "507f1f77bcf86cd799439011",
    "content": "Hello! This is a test message from User 1 to User 2.",
    "title": "Test Message",
    "createdAt": "2024-01-01T10:30:00.000Z",
    "isAdminBroadcast": false
  }
}

üîç TESTING HINTS:
- Make sure senderId and receiverId are valid user IDs in your database
- Try without title and image (optional fields)
- Test with empty content (should fail)
- Test with invalid user IDs

TROUBLESHOOTING:
- 404 Error: User IDs don't exist in database
- 400 Error: Missing required fields
- 500 Error: Database connection issue

-------------------------------------------------------------------------------

TEST 2: GET MESSAGES BETWEEN TWO USERS
Method: GET
URL: http://www.blackstonevoicechatroom.online/chats/conversation/507f1f77bcf86cd799439010/507f1f77bcf86cd799439011

Headers: None required

Expected Response (200):
{
  "success": true,
  "messages": [
    {
      "_id": "message_id",
      "senderId": {
        "_id": "507f1f77bcf86cd799439010",
        "name": "Test User 1",
        "username": "testuser1",
        "ui_id": 1001
      },
      "receiverId": {
        "_id": "507f1f77bcf86cd799439011",
        "name": "Test User 2",
        "username": "testuser2",
        "ui_id": 1002
      },
      "content": "Hello! This is a test message from User 1 to User 2.",
      "createdAt": "2024-01-01T10:30:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 50,
    "total": 1
  }
}

üîç TESTING HINTS:
- Test with pagination: ?page=1&limit=10
- Test with users who have no conversation (empty messages array)
- Test with invalid user IDs
- Check message order (oldest first)

URL VARIATIONS TO TEST:
- /chats/conversation/USER1/USER2?page=2&limit=5
- /chats/conversation/INVALID_ID/USER2 (should handle gracefully)

-------------------------------------------------------------------------------

TEST 3: GET ALL CONVERSATIONS FOR A USER
Method: GET
URL: http://www.blackstonevoicechatroom.online/chats/conversations/507f1f77bcf86cd799439010

Headers: None required

Expected Response (200):
{
  "success": true,
  "conversations": [
    {
      "_id": "conversation_id",
      "members": [
        {
          "_id": "507f1f77bcf86cd799439010",
          "name": "Test User 1",
          "username": "testuser1",
          "ui_id": 1001
        },
        {
          "_id": "507f1f77bcf86cd799439011",
          "name": "Test User 2",
          "username": "testuser2",
          "ui_id": 1002
        }
      ],
      "lastMessage": {
        "_id": "message_id",
        "content": "Hello! This is a test message from User 1 to User 2.",
        "createdAt": "2024-01-01T10:30:00.000Z"
      },
      "updatedAt": "2024-01-01T10:30:00.000Z"
    }
  ]
}

üîç TESTING HINTS:
- Test with user who has no conversations (empty array)
- Check if conversations are sorted by last activity
- Verify lastMessage shows the most recent message

-------------------------------------------------------------------------------

TEST 4: DELETE MESSAGE
Method: DELETE
URL: http://www.blackstonevoicechatroom.online/chats/message/MESSAGE_ID/507f1f77bcf86cd799439010

Replace MESSAGE_ID with actual message ID from previous tests

Headers: None required

Expected Response (200):
{
  "success": true,
  "message": "Message deleted successfully"
}

üîç TESTING HINTS:
- Only sender can delete their own message
- Test with wrong user ID (should fail)
- Test with invalid message ID
- Verify message is actually deleted by fetching conversation again

NEGATIVE TESTS:
- /chats/message/INVALID_ID/USER_ID (404 error)
- /chats/message/MESSAGE_ID/WRONG_USER_ID (404 error)

===============================================================================
                         ADMIN MESSAGES TESTING
===============================================================================

TEST 5: SEND ADMIN BROADCAST TO ALL USERS
Method: POST
URL: http://www.blackstonevoicechatroom.online/chats/admin/broadcast

Headers:
Content-Type: application/json

Test Body:
{
  "adminId": "507f1f77bcf86cd799439001",
  "title": "System Maintenance Notice",
  "content": "The system will be under maintenance from 2-4 PM today. Please save your work and log out safely.",
  "image": "https://example.com/maintenance-notice.jpg"
}

Expected Response (201):
{
  "success": true,
  "message": "Broadcast sent to 150 users",
  "sentTo": 150,
  "totalUsers": 150
}

üîç TESTING HINTS:
- Make sure adminId exists in database
- Check if messages are created for all users
- Verify isAdminBroadcast flag is true
- Test without title and image (optional)

NEGATIVE TESTS:
- Test with invalid adminId
- Test without content (required field)
- Test with empty adminId

-------------------------------------------------------------------------------

TEST 6: SEND TARGETED ADMIN BROADCAST
Method: POST
URL: http://www.blackstonevoicechatroom.online/chats/admin/broadcast

Headers:
Content-Type: application/json

Test Body:
{
  "adminId": "507f1f77bcf86cd799439001",
  "title": "VIP Member Announcement",
  "content": "Special offer for VIP members only! Get 50% off on premium features.",
  "image": "https://example.com/vip-offer.jpg",
  "targetUsers": [
    "507f1f77bcf86cd799439010",
    "507f1f77bcf86cd799439011",
    "507f1f77bcf86cd799439012"
  ]
}

Expected Response (201):
{
  "success": true,
  "message": "Broadcast sent to 3 users",
  "sentTo": 3,
  "totalUsers": 3
}

üîç TESTING HINTS:
- Test with mix of valid and invalid user IDs in targetUsers
- Test with empty targetUsers array (should send to all)
- Verify only specified users receive the message

-------------------------------------------------------------------------------

TEST 7: GET ADMIN BROADCAST HISTORY
Method: GET
URL: http://www.blackstonevoicechatroom.online/chats/admin/broadcasts/507f1f77bcf86cd799439001?page=1&limit=10

Headers: None required

Expected Response (200):
{
  "success": true,
  "messages": [
    {
      "_id": "broadcast_message_id",
      "senderId": "507f1f77bcf86cd799439001",
      "receiverId": {
        "_id": "507f1f77bcf86cd799439010",
        "name": "Test User 1",
        "username": "testuser1",
        "ui_id": 1001
      },
      "title": "System Maintenance Notice",
      "content": "The system will be under maintenance from 2-4 PM today.",
      "isAdminBroadcast": true,
      "createdAt": "2024-01-01T11:00:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 10,
    "total": 25,
    "pages": 3
  }
}

üîç TESTING HINTS:
- Test pagination with different page and limit values
- Verify messages are sorted by newest first
- Check if only admin's messages are returned
- Test with admin who has no broadcast history

-------------------------------------------------------------------------------

TEST 8: GET ADMIN-USER CONVERSATION
Method: GET
URL: http://www.blackstonevoicechatroom.online/chats/conversation/507f1f77bcf86cd799439001/507f1f77bcf86cd799439010

Headers: None required

Expected Response (200):
{
  "success": true,
  "messages": [
    {
      "_id": "message_id",
      "senderId": {
        "_id": "507f1f77bcf86cd799439001",
        "name": "Admin User",
        "username": "admin",
        "ui_id": 5001
      },
      "receiverId": {
        "_id": "507f1f77bcf86cd799439010",
        "name": "Test User 1",
        "username": "testuser1",
        "ui_id": 1001
      },
      "title": "System Maintenance Notice",
      "content": "The system will be under maintenance from 2-4 PM today.",
      "isAdminBroadcast": true,
      "createdAt": "2024-01-01T11:00:00.000Z"
    }
  ],
  "pagination": {
    "page": 1,
    "limit": 50,
    "total": 1
  }
}

üîç TESTING HINTS:
- Shows messages between admin and specific user
- Useful for viewing what a specific user received from admin
- Test with users who never received admin messages

-------------------------------------------------------------------------------

TEST 9: GET ALL USERS LIST (FOR ADMIN)
Method: GET
URL: http://www.blackstonevoicechatroom.online/chats/admin/users/507f1f77bcf86cd799439001

Headers: None required

Expected Response (200):
{
  "success": true,
  "users": [
    {
      "_id": "507f1f77bcf86cd799439010",
      "name": "Test User 1",
      "username": "testuser1",
      "profilePicture": "https://example.com/user1.jpg",
      "ui_id": 1001,
      "email": "testuser1@example.com",
      "createdAt": "2024-01-01T09:00:00.000Z"
    },
    {
      "_id": "507f1f77bcf86cd799439011",
      "name": "Test User 2",
      "username": "testuser2",
      "profilePicture": "https://example.com/user2.jpg",
      "ui_id": 1002,
      "email": "testuser2@example.com",
      "createdAt": "2024-01-01T08:00:00.000Z"
    }
  ],
  "total": 150
}

üîç TESTING HINTS:
- Verify admin users are excluded from the list
- Check if users are sorted by registration date
- Use user IDs from this list for targeted broadcasts

===============================================================================
                           GIFTS APIS TESTING
===============================================================================

TEST 10: CREATE GIFT (ADMIN)
Method: POST
URL: http://www.blackstonevoicechatroom.online/api/v2/admin/gift/create

Headers:
Content-Type: application/json

Test Body:
{
  "amount": 100,
  "giftName": "Golden Crown",
  "giftImage": "https://example.com/crown.jpg",
  "giftFile": "https://example.com/crown.gif",
  "giftCategory": "premium"
}

Expected Response (201):
{
  "success": true,
  "message": "Gift created successfully",
  "gift": {
    "_id": "507f1f77bcf86cd799439050",
    "giftCode": 1234567,
    "amount": 100,
    "giftName": "Golden Crown",
    "giftImage": "https://example.com/crown.jpg",
    "giftFile": "https://example.com/crown.gif",
    "giftCategory": "premium",
    "createdAt": "2024-01-01T12:00:00.000Z"
  }
}

üîç TESTING HINTS:
- Save the gift ID from response for delete test
- Note the auto-generated giftCode (7-digit number)
- Test with only amount (minimum required field)
- Verify giftCode is unique each time

MINIMAL TEST BODY:
{
  "amount": 50
}

NEGATIVE TESTS:
- Test without amount (should fail)
- Test with invalid amount (negative or zero)

-------------------------------------------------------------------------------

TEST 11: GET ALL GIFTS
Method: GET
URL: http://www.blackstonevoicechatroom.online/api/v2/client/gift/get/all

Headers: None required

Expected Response (200):
{
  "success": true,
  "message": "Gifts retrieved successfully",
  "gifts": [
    {
      "_id": "507f1f77bcf86cd799439050",
      "giftCode": 1234567,
      "amount": 100,
      "giftName": "Golden Crown",
      "giftImage": "https://example.com/crown.jpg",
      "giftFile": "https://example.com/crown.gif",
      "giftCategory": "premium",
      "createdAt": "2024-01-01T12:00:00.000Z"
    },
    {
      "_id": "507f1f77bcf86cd799439051",
      "giftCode": 2345678,
      "amount": 50,
      "giftName": "Silver Star",
      "giftImage": "https://example.com/star.jpg",
      "giftFile": "https://example.com/star.gif",
      "giftCategory": "normal",
      "createdAt": "2024-01-01T11:30:00.000Z"
    }
  ]
}

üîç TESTING HINTS:
- Verify gifts are sorted by newest first
- Check all gift properties are present
- Note gift IDs for delete testing
- Should return empty array if no gifts exist

-------------------------------------------------------------------------------

TEST 12: DELETE GIFT (ADMIN)
Method: DELETE
URL: http://www.blackstonevoicechatroom.online/api/v2/admin/gift/delete/507f1f77bcf86cd799439050

Replace gift ID with actual ID from create test

Headers: None required

Expected Response (200):
{
  "success": true,
  "message": "Gift deleted successfully",
  "deletedGift": {
    "_id": "507f1f77bcf86cd799439050",
    "giftName": "Golden Crown",
    "amount": 100,
    "giftCode": 1234567
  }
}

üîç TESTING HINTS:
- Use gift ID from create test
- Verify gift is actually deleted by calling get all gifts
- Test with invalid gift ID (should return 404)
- Deletion is permanent and cannot be undone

NEGATIVE TESTS:
- /api/v2/admin/gift/delete/INVALID_ID (404 error)
- /api/v2/admin/gift/delete/ (400 error - missing ID)

-------------------------------------------------------------------------------

TEST 13: SEND GIFT (USER TO USER)
Method: POST
URL: http://www.blackstonevoicechatroom.online/api/v2/client/gift/send

Headers:
Content-Type: application/json

Test Body:
{
  "sender": 1001,
  "receiver": 1002,
  "amount": 50
}

Expected Response (200):
{
  "success": true,
  "message": "Gift sent successfully",
  "transaction": {
    "sender": 1001,
    "receiver": 1002,
    "amount": 50,
    "senderBalanceAfter": 950,
    "receiverBalanceAfter": 1050
  }
}

üîç TESTING HINTS:
- sender and receiver use ui_id (not ObjectId)
- Make sure users have sufficient balance
- Verify balance changes in database
- Gift record should be created

NEGATIVE TESTS:
- Test with insufficient sender balance
- Test with invalid sender/receiver ui_id
- Test with negative amount

===============================================================================
                              ROOM CHAT TESTING
===============================================================================

TEST 14: SEND ROOM MESSAGE
Method: POST
URL: http://www.blackstonevoicechatroom.online/room/ROOM123/chat

Headers:
Content-Type: application/json

Test Body:
{
  "ui_id": "1001",
  "message": "Hello everyone in this room! This is a test message."
}

Expected Response (200):
{
  "message": "Message sent"
}

üîç TESTING HINTS:
- User must be member of the room
- Room must exist and chat must be enabled
- ui_id should be string format
- Test with non-member user (should fail)

PREREQUISITES:
- Create a test room first
- Add test user to room members
- Ensure room chat is enabled

-------------------------------------------------------------------------------

TEST 15: GET ROOM MESSAGES
Method: GET
URL: http://www.blackstonevoicechatroom.online/room/ROOM123/chat

Headers: None required

Expected Response (200):
{
  "chat": [
    {
      "_id": "room_message_id",
      "sender": "1001",
      "message": "Hello everyone in this room! This is a test message.",
      "timestamp": "2024-01-01T12:00:00.000Z"
    },
    {
      "_id": "room_message_id_2",
      "sender": "1002",
      "message": "Hi there! Welcome to the room!",
      "timestamp": "2024-01-01T12:01:00.000Z"
    }
  ]
}

üîç TESTING HINTS:
- Messages sorted chronologically
- sender field contains ui_id
- Test with room that has no messages
- Test with invalid room ID

===============================================================================
                            ERROR TESTING SCENARIOS
===============================================================================

TEST 16: MISSING REQUIRED FIELDS
Test all APIs with missing required fields to verify error handling

Example - Send message without content:
POST /chats/send
{
  "senderId": "507f1f77bcf86cd799439010",
  "receiverId": "507f1f77bcf86cd799439011"
  // Missing content
}

Expected: 400 Bad Request
{
  "success": false,
  "message": "senderId, receiverId and content are required"
}

üîç TESTING HINTS:
- Test each API with missing required fields
- Verify appropriate error messages
- Check HTTP status codes

-------------------------------------------------------------------------------

TEST 17: INVALID USER IDS
Test with invalid or non-existent user IDs

Example:
POST /chats/send
{
  "senderId": "INVALID_ID",
  "receiverId": "507f1f77bcf86cd799439011",
  "content": "Test message"
}

Expected: 404 Not Found
{
  "success": false,
  "message": "Sender or receiver not found"
}

-------------------------------------------------------------------------------

TEST 18: SERVER ERROR SIMULATION
Test database connectivity and server errors

üîç TESTING HINTS:
- Test with database disconnected
- Test with very large payloads
- Test concurrent requests
- Monitor server logs during testing

===============================================================================
                              POSTMAN TESTING
===============================================================================

üìÅ POSTMAN COLLECTION SETUP:

1. Create New Collection: "Black Stone Chat & Gifts API"

2. Create Environment Variables:
   - base_url: http://www.blackstonevoicechatroom.online
   - admin_id: 507f1f77bcf86cd799439001
   - user1_id: 507f1f77bcf86cd799439010
   - user2_id: 507f1f77bcf86cd799439011

3. Pre-request Scripts (for dynamic data):
```javascript
// Generate random message content
pm.environment.set("random_content", "Test message " + Math.random());

// Generate current timestamp
pm.environment.set("timestamp", new Date().toISOString());
```

4. Test Scripts (for validation):
```javascript
// Validate response
pm.test("Status code is 200 or 201", function () {
    pm.expect(pm.response.code).to.be.oneOf([200, 201]);
});

pm.test("Response has success field", function () {
    pm.expect(pm.response.json()).to.have.property('success');
});

pm.test("Success is true", function () {
    pm.expect(pm.response.json().success).to.be.true;
});

// Save response data for next requests
if (pm.response.json().data && pm.response.json().data._id) {
    pm.environment.set("last_message_id", pm.response.json().data._id);
}
```

===============================================================================
                              cURL TESTING
===============================================================================

üñ•Ô∏è COMMAND LINE TESTING:

1. Send Message:
```bash
curl -X POST "http://www.blackstonevoicechatroom.online/chats/send" \
  -H "Content-Type: application/json" \
  -d '{
    "senderId": "507f1f77bcf86cd799439010",
    "receiverId": "507f1f77bcf86cd799439011",
    "content": "Hello from cURL test!",
    "title": "cURL Test"
  }'
```

2. Get Messages:
```bash
curl -X GET "http://www.blackstonevoicechatroom.online/chats/conversation/507f1f77bcf86cd799439010/507f1f77bcf86cd799439011"
```

3. Admin Broadcast:
```bash
curl -X POST "http://www.blackstonevoicechatroom.online/chats/admin/broadcast" \
  -H "Content-Type: application/json" \
  -d '{
    "adminId": "507f1f77bcf86cd799439001",
    "title": "cURL Test Broadcast",
    "content": "This is a test broadcast from cURL command."
  }'
```

4. Create Gift:
```bash
curl -X POST "http://www.blackstonevoicechatroom.online/api/v2/admin/gift/create" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 75,
    "giftName": "cURL Test Gift",
    "giftCategory": "test"
  }'
```

5. Delete Gift:
```bash
curl -X DELETE "http://www.blackstonevoicechatroom.online/api/v2/admin/gift/delete/GIFT_ID_HERE"
```

===============================================================================
                         FRONTEND JAVASCRIPT TESTING
===============================================================================

üì± BROWSER CONSOLE TESTING:

```javascript
// Test function for sending message
async function testSendMessage() {
  try {
    const response = await fetch('http://www.blackstonevoicechatroom.online/chats/send', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        senderId: '507f1f77bcf86cd799439010',
        receiverId: '507f1f77bcf86cd799439011',
        content: 'Test message from browser console!',
        title: 'Browser Test'
      })
    });
    
    const result = await response.json();
    console.log('Send Message Result:', result);
    return result;
  } catch (error) {
    console.error('Error:', error);
  }
}

// Test function for admin broadcast
async function testAdminBroadcast() {
  try {
    const response = await fetch('http://www.blackstonevoicechatroom.online/chats/admin/broadcast', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        adminId: '507f1f77bcf86cd799439001',
        title: 'Browser Console Test',
        content: 'This is a test broadcast from browser console.'
      })
    });
    
    const result = await response.json();
    console.log('Admin Broadcast Result:', result);
    return result;
  } catch (error) {
    console.error('Error:', error);
  }
}

// Test function for getting gifts
async function testGetGifts() {
  try {
    const response = await fetch('http://www.blackstonevoicechatroom.online/api/v2/client/gift/get/all');
    const result = await response.json();
    console.log('Get Gifts Result:', result);
    return result;
  } catch (error) {
    console.error('Error:', error);
  }
}

// Run all tests
async function runAllTests() {
  console.log('üß™ Starting API Tests...');
  
  console.log('1. Testing Send Message...');
  await testSendMessage();
  
  console.log('2. Testing Admin Broadcast...');
  await testAdminBroadcast();
  
  console.log('3. Testing Get Gifts...');
  await testGetGifts();
  
  console.log('‚úÖ All tests completed!');
}

// Run tests
runAllTests();
```

===============================================================================
                              TESTING CHECKLIST
===============================================================================

‚úÖ BASIC FUNCTIONALITY:
‚ñ° Send message between users
‚ñ° Get conversation messages
‚ñ° Get user conversations
‚ñ° Delete message
‚ñ° Send admin broadcast (all users)
‚ñ° Send admin broadcast (targeted)
‚ñ° Get admin broadcast history
‚ñ° Get admin-user conversation
‚ñ° Get users list
‚ñ° Create gift
‚ñ° Get all gifts
‚ñ° Delete gift
‚ñ° Send gift between users
‚ñ° Send room message
‚ñ° Get room messages

‚úÖ ERROR HANDLING:
‚ñ° Missing required fields (400 errors)
‚ñ° Invalid user IDs (404 errors)
‚ñ° Non-existent resources (404 errors)
‚ñ° Server errors (500 errors)
‚ñ° Database connection errors

‚úÖ EDGE CASES:
‚ñ° Empty message content
‚ñ° Very long message content (>2000 chars)
‚ñ° Special characters in messages
‚ñ° Invalid gift amounts (negative, zero)
‚ñ° Non-existent room IDs
‚ñ° Users not in room trying to send messages

‚úÖ PERFORMANCE:
‚ñ° Response times under 2 seconds
‚ñ° Pagination works correctly
‚ñ° Large user lists load properly
‚ñ° Concurrent requests handling

‚úÖ DATA VALIDATION:
‚ñ° Response structure matches documentation
‚ñ° All required fields present in responses
‚ñ° Correct data types in responses
‚ñ° Success flags are accurate

===============================================================================
                           TROUBLESHOOTING GUIDE
===============================================================================

üö® COMMON ISSUES AND SOLUTIONS:

1. **404 User Not Found**
   - Issue: Invalid user IDs in request
   - Solution: Verify user IDs exist in database
   - Check: Use valid MongoDB ObjectId format (24 characters)

2. **400 Missing Required Fields**
   - Issue: Missing senderId, receiverId, or content
   - Solution: Include all required fields in request body
   - Check: Content-Type header is set correctly

3. **500 Database Error**
   - Issue: Database connection problems
   - Solution: Check database server status
   - Check: Verify connection string in server config

4. **CORS Errors (Browser)**
   - Issue: Cross-origin request blocked
   - Solution: Add CORS headers to server
   - Workaround: Test with Postman instead of browser

5. **Empty Response Arrays**
   - Issue: No data found for query
   - Solution: Create test data first
   - Check: Verify user IDs and relationships exist

6. **Timeout Errors**
   - Issue: Server taking too long to respond
   - Solution: Check server performance and database
   - Check: Network connectivity

7. **JSON Parse Errors**
   - Issue: Invalid JSON in request body
   - Solution: Validate JSON syntax
   - Tool: Use JSON validator online

===============================================================================
                              SUCCESS METRICS
===============================================================================

üéØ WHAT TO MEASURE:

üìä RESPONSE TIMES:
- Send Message: < 1 second
- Get Messages: < 2 seconds
- Admin Broadcast: < 5 seconds (depends on user count)
- Gift Operations: < 1 second

üìà SUCCESS RATES:
- All valid requests should return 200/201
- Error responses should be meaningful
- No 500 errors for valid requests

üìã DATA INTEGRITY:
- Messages stored correctly in database
- User balances updated correctly after gifts
- Conversation relationships maintained
- Admin broadcast flags set properly

===============================================================================
                                 END OF GUIDE
===============================================================================

üéØ Complete testing guide for all Chat and Gift APIs!
üß™ Use this guide to thoroughly test all functionality
üìù Report any issues found during testing
üöÄ Ready for production after successful testing!

HAPPY TESTING! üéâ 