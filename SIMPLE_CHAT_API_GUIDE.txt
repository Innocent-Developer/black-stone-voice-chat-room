===============================================================================
                        SIMPLE CHAT SYSTEM API GUIDE
===============================================================================

üîó BASE URL: http://www.blackstonevoicechatroom.online
üìù NO AUTHENTICATION REQUIRED - Simple and easy to use!

===============================================================================
                            USER CHAT ENDPOINTS
===============================================================================

1. SEND MESSAGE
   Method: POST
   URL: /chats/send
   
   JSON Body:
   {
     "senderId": "507f1f77bcf86cd799439010",
     "receiverId": "507f1f77bcf86cd799439011",
     "content": "Hello! How are you?",
     "title": "Greeting",
     "image": "https://example.com/photo.jpg"
   }
   
   Response:
   {
     "success": true,
     "message": "Message sent successfully",
     "data": {
       "_id": "507f1f77bcf86cd799439020",
       "senderId": "507f1f77bcf86cd799439010",
       "receiverId": "507f1f77bcf86cd799439011",
       "content": "Hello! How are you?",
       "title": "Greeting",
       "createdAt": "2024-01-01T10:30:00.000Z"
     }
   }
   
   Notes:
   - senderId, receiverId, content are required
   - title and image are optional
   - senderId and receiverId must be valid user IDs

-------------------------------------------------------------------------------

2. GET MESSAGES BETWEEN TWO USERS
   Method: GET
   URL: /chats/conversation/USER1_ID/USER2_ID?page=1&limit=50
   
   Example: /chats/conversation/507f1f77bcf86cd799439010/507f1f77bcf86cd799439011
   
   Response:
   {
     "success": true,
     "messages": [
       {
         "_id": "507f1f77bcf86cd799439020",
         "senderId": {
           "_id": "507f1f77bcf86cd799439010",
           "name": "John Doe",
           "username": "johndoe",
           "ui_id": 1001
         },
         "receiverId": {
           "_id": "507f1f77bcf86cd799439011",
           "name": "Jane Smith",
           "username": "janesmith",
           "ui_id": 1002
         },
         "content": "Hello! How are you?",
         "createdAt": "2024-01-01T10:30:00.000Z"
       }
     ],
     "pagination": {
       "page": 1,
       "limit": 50,
       "total": 25
     }
   }
   
   Notes:
   - Replace USER1_ID and USER2_ID with actual user IDs
   - Returns messages between the two users
   - Supports pagination with page and limit parameters

-------------------------------------------------------------------------------

3. GET ALL CONVERSATIONS FOR A USER
   Method: GET
   URL: /chats/conversations/USER_ID
   
   Example: /chats/conversations/507f1f77bcf86cd799439010
   
   Response:
   {
     "success": true,
     "conversations": [
       {
         "_id": "507f1f77bcf86cd799439030",
         "members": [
           {
             "_id": "507f1f77bcf86cd799439010",
             "name": "John Doe",
             "username": "johndoe",
             "ui_id": 1001
           },
           {
             "_id": "507f1f77bcf86cd799439011",
             "name": "Jane Smith",
             "username": "janesmith",
             "ui_id": 1002
           }
         ],
         "lastMessage": {
           "_id": "507f1f77bcf86cd799439020",
           "content": "Hello! How are you?",
           "createdAt": "2024-01-01T10:30:00.000Z"
         },
         "updatedAt": "2024-01-01T10:30:00.000Z"
       }
     ]
   }
   
   Notes:
   - Replace USER_ID with the actual user ID
   - Returns all conversations for that user
   - Shows last message in each conversation

-------------------------------------------------------------------------------

4. DELETE MESSAGE
   Method: DELETE
   URL: /chats/message/MESSAGE_ID/USER_ID
   
   Example: /chats/message/507f1f77bcf86cd799439020/507f1f77bcf86cd799439010
   
   Response:
   {
     "success": true,
     "message": "Message deleted successfully"
   }
   
   Notes:
   - Only the sender can delete their own messages
   - Replace MESSAGE_ID with actual message ID
   - Replace USER_ID with the sender's user ID

===============================================================================
                           ADMIN BROADCAST ENDPOINTS
===============================================================================

5. SEND BROADCAST MESSAGE
   Method: POST
   URL: /chats/admin/broadcast
   
   JSON Body (Send to All Users):
   {
     "adminId": "507f1f77bcf86cd799439001",
     "title": "Important Notice",
     "content": "System maintenance will begin at 2 PM today.",
     "image": "https://example.com/notice.jpg"
   }
   
   JSON Body (Send to Specific Users):
   {
     "adminId": "507f1f77bcf86cd799439001",
     "title": "VIP Announcement",
     "content": "Special offer for VIP members!",
     "targetUsers": [
       "507f1f77bcf86cd799439010",
       "507f1f77bcf86cd799439011"
     ]
   }
   
   Response:
   {
     "success": true,
     "message": "Broadcast sent to 150 users",
     "sentTo": 150,
     "totalUsers": 150
   }
   
   Notes:
   - adminId and content are required
   - title and image are optional
   - If targetUsers is provided, sends only to those users
   - If targetUsers is empty, sends to all users

-------------------------------------------------------------------------------

6. GET ADMIN BROADCAST HISTORY
   Method: GET
   URL: /chats/admin/broadcasts/ADMIN_ID?page=1&limit=50
   
   Example: /chats/admin/broadcasts/507f1f77bcf86cd799439001
   
   Response:
   {
     "success": true,
     "messages": [
       {
         "_id": "507f1f77bcf86cd799439040",
         "senderId": "507f1f77bcf86cd799439001",
         "receiverId": {
           "_id": "507f1f77bcf86cd799439010",
           "name": "John Doe",
           "username": "johndoe",
           "ui_id": 1001
         },
         "title": "Important Notice",
         "content": "System maintenance will begin at 2 PM today.",
         "isAdminBroadcast": true,
         "createdAt": "2024-01-01T11:00:00.000Z"
       }
     ],
     "pagination": {
       "page": 1,
       "limit": 50,
       "total": 25,
       "pages": 1
     }
   }
   
   Notes:
   - Replace ADMIN_ID with actual admin user ID
   - Shows all broadcast messages sent by the admin
   - Supports pagination

-------------------------------------------------------------------------------

7. GET ALL USERS (FOR ADMIN)
   Method: GET
   URL: /chats/admin/users/ADMIN_ID
   
   Example: /chats/admin/users/507f1f77bcf86cd799439001
   
   Response:
   {
     "success": true,
     "users": [
       {
         "_id": "507f1f77bcf86cd799439010",
         "name": "John Doe",
         "username": "johndoe",
         "ui_id": 1001,
         "email": "john@example.com",
         "createdAt": "2024-01-01T09:00:00.000Z"
       },
       {
         "_id": "507f1f77bcf86cd799439011",
         "name": "Jane Smith",
         "username": "janesmith",
         "ui_id": 1002,
         "email": "jane@example.com",
         "createdAt": "2024-01-01T08:00:00.000Z"
       }
     ],
     "total": 150
   }
   
   Notes:
   - Replace ADMIN_ID with actual admin user ID
   - Returns list of all users except admins
   - Use user IDs for targeted broadcasts

===============================================================================
                            ROOM CHAT ENDPOINTS
===============================================================================

8. SEND MESSAGE IN ROOM
   Method: POST
   URL: /room/ROOM_ID/chat
   
   Example: /room/ROOM123/chat
   
   JSON Body:
   {
     "ui_id": "1001",
     "message": "Hello everyone in this room!"
   }
   
   Response:
   {
     "message": "Message sent"
   }
   
   Notes:
   - User must be a member of the room
   - ui_id is the user's custom ID number
   - Room must exist and chat must be enabled

-------------------------------------------------------------------------------

9. GET ROOM MESSAGES
   Method: GET
   URL: /room/ROOM_ID/chat
   
   Example: /room/ROOM123/chat
   
   Response:
   {
     "chat": [
       {
         "_id": "507f1f77bcf86cd799439050",
         "sender": "1001",
         "message": "Hello everyone in this room!",
         "timestamp": "2024-01-01T12:00:00.000Z"
       },
       {
         "_id": "507f1f77bcf86cd799439051",
         "sender": "1002",
         "message": "Hi there! Welcome!",
         "timestamp": "2024-01-01T12:01:00.000Z"
       }
     ]
   }
   
   Notes:
   - Returns all messages in the room
   - sender field contains ui_id
   - Messages are sorted by time

===============================================================================
                              ERROR RESPONSES
===============================================================================

400 Bad Request:
{
  "success": false,
  "message": "senderId, receiverId and content are required",
  "error": "Missing required fields"
}

404 Not Found:
{
  "success": false,
  "message": "Sender or receiver not found",
  "error": "User does not exist"
}

500 Server Error:
{
  "success": false,
  "message": "Failed to send message",
  "error": "Database connection error"
}

===============================================================================
                        SIMPLE JAVASCRIPT EXAMPLES
===============================================================================

// Send a message
async function sendMessage(senderId, receiverId, content, title, image) {
  const response = await fetch('/chats/send', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      senderId: senderId,
      receiverId: receiverId,
      content: content,
      title: title,
      image: image
    })
  });
  
  const result = await response.json();
  console.log(result);
  return result;
}

// Get messages between two users
async function getMessages(userId1, userId2) {
  const response = await fetch(`/chats/conversation/${userId1}/${userId2}`);
  const result = await response.json();
  console.log(result);
  return result;
}

// Get all conversations for a user
async function getConversations(userId) {
  const response = await fetch(`/chats/conversations/${userId}`);
  const result = await response.json();
  console.log(result);
  return result;
}

// Send admin broadcast
async function sendBroadcast(adminId, title, content, targetUsers) {
  const response = await fetch('/chats/admin/broadcast', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      adminId: adminId,
      title: title,
      content: content,
      targetUsers: targetUsers
    })
  });
  
  const result = await response.json();
  console.log(result);
  return result;
}

// Delete a message
async function deleteMessage(messageId, userId) {
  const response = await fetch(`/chats/message/${messageId}/${userId}`, {
    method: 'DELETE'
  });
  const result = await response.json();
  console.log(result);
  return result;
}

===============================================================================
                              QUICK REFERENCE
===============================================================================

USER CHAT:
POST   /chats/send                              - Send message
GET    /chats/conversation/:userId1/:userId2    - Get messages between users
GET    /chats/conversations/:userId             - Get user's conversations
DELETE /chats/message/:messageId/:userId        - Delete message

ADMIN BROADCAST:
POST   /chats/admin/broadcast                   - Send broadcast
GET    /chats/admin/broadcasts/:adminId         - Get broadcast history
GET    /chats/admin/users/:adminId              - Get all users

ROOM CHAT:
POST   /room/:roomId/chat                       - Send room message
GET    /room/:roomId/chat                       - Get room messages

===============================================================================
                               KEY FEATURES
===============================================================================

‚úÖ No authentication required - simple to use
‚úÖ User-to-user private messaging
‚úÖ Admin broadcast to all or specific users
‚úÖ Room-based group chat
‚úÖ Message history and conversations
‚úÖ Pagination support
‚úÖ Image and file support
‚úÖ Simple JSON responses
‚úÖ Easy error handling
‚úÖ Real-time compatible

===============================================================================
                              TESTING TIPS
===============================================================================

1. Use Postman or similar tool to test APIs
2. Make sure user IDs are valid MongoDB ObjectIds
3. Test with different users to see conversations
4. Try sending broadcasts to specific users
5. Test room chat with room members
6. Check error responses with invalid data

===============================================================================
                               IMPORTANT NOTES
===============================================================================

üîπ All user IDs must be valid MongoDB ObjectIds (24 characters)
üîπ Messages are stored permanently in database
üîπ No authentication means anyone can send messages
üîπ Room chat requires room membership
üîπ Admin broadcasts create individual conversations
üîπ All responses include "success" field for easy checking
üîπ Timestamps are in ISO format
üîπ Content field supports up to 2000 characters

===============================================================================
                                 END OF GUIDE
===============================================================================

üéØ Simple, fast, and easy to use chat system!
üì± Perfect for mobile and web applications
üöÄ No complex authentication - just start chatting! 